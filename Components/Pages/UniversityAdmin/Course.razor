 @page "/UniversityAdmin/Course"
 @layout Layout.UniversityAdminLayout
@rendermode InteractiveServer
@using Microsoft.Extensions.Caching.Memory
@using SchPeoManageWeb.Models
@using SchPeoManageWeb.Services
@using System.Text.RegularExpressions
@using SchPeoManageWeb.Utils
@inject IMemoryCache MemoryCache

<h1>课程信息管理</h1
 @*
<MButton Outlined
         Elevation="3"
         Color="accent"
         OnClick="AddCourseInfo">
    添加课程
</MButton>
<MForm Model="searchModel" ValueChanged="onSearch">
    <MContainer>
        <MRow>
            <MCol Cols="12"
                  Sm="6"
                  Md="4">
                <MTextField @bind-Value="searchModel.SearchInfo"
                            Clearable
                            Outlined
                            Label="搜索">
                </MTextField>
            </MCol>
            <MCol Cols="12"
                  Sm="6"
                  Md="3">
                <MSelect Items="_allMajors"
                         @bind-Value="searchModel.MajorLimit"
                         Clearable
                         TItem="MMajor"
                         TItemValue="int"
                         TValue="int"
                         Outlined
                         Label="专业"
                         ItemValue="r => r.MajorID"
                         ItemText="r => r.MajorName">
                </MSelect>
            </MCol>
            <MCol Cols="12"
                  Sm="6"
                  Md="3">
                <MSelect Items="_allSchools"
                         @bind-Value="searchModel.SchoolLimit"
                         Clearable
                         TItem="MSchool"
                         TItemValue="int"
                         TValue="int"
                         Outlined
                         Label="学院"
                         ItemValue="r => r.SchoolId"
                         ItemText="r => r.SchoolName">
                </MSelect>
            </MCol>
        </MRow>
    </MContainer>
</MForm>

<!--添加课程信息按钮呼出的表单-->

<!--课程信息表格主体-->
<MCard>
   
    ﻿<MDataTable Headers="_headers"
                 Items="@showCourses"
                 ItemsPerPage="10"
                 Class="elevation-1">
        <ItemColContent>
            @if (context.Header.Value == "Actions")
            {
                <MRow>
                    <MCol Cols="12" Sm="3" Lg="3">
                        <MButton Color="green"
                                 OnClick="() => EditTeacherForm(context.Item)"
                                 MaxWidth=25
                                 Depressed>
                            <MIcon Left
                                   Class="mr-2">
                                mdi-pencil
                            </MIcon>
                            编辑
                        </MButton>
                    </MCol>
                    <MCol Cols="12" Sm="1" Lg="1"><MSpacer></MSpacer></MCol>
                    <MCol Cols="12" Sm="3" Lg="3">
                        <MButton Color="yellow"
                                 OnClick="() => ResignTeacherForm(context.Item)"
                                 MaxWidth=25
                                 Depressed>
                            <MIcon Left
                                   Class="mr-2">
                                mdi-account-remove
                            </MIcon>
                            离职
                        </MButton>
                    </MCol>
                    <MCol Cols="12" Sm="1" Lg="1"><MSpacer></MSpacer></MCol>
                    <MCol Cols="12" Sm="3" Lg="3">
                        <MButton Color="red"
                                 OnClick="() => DeleteTeacherForm(context.Item)"
                                 MaxWidth=25
                                 Depressed>
                            <MIcon Left
                                   Class="mr-2">
                                mdi-delete
                            </MIcon>
                            删除
                        </MButton>
                    </MCol>
                </MRow>

            }
            else
            {
                @context.Value
            }
        </ItemColContent>
    </MDataTable>
</MCard>


@code {
    string yes = "是";
    string no = "否";

    /*------------------------启动-------------------------------*/
    // 缓存读数据
    private List<MSchool> _allSchools;
    private List<MMajor> _allMajors;
    private List<MCourse> _allCourses;
    List<MCourse> showCourses = new List<MCourse>();
    // 网页缓存教师信息列表【60s刷新一次】
    private List<MTeacher> LoadTeacherInfoFromCacheAsync()
    {
        const string cacheItemKey = "CachedTeacherInfo";

        if (!MemoryCache.TryGetValue(cacheItemKey, out List<MTeacher> cachedTeacherInfo) || cachedTeacherInfo.Count == 0)
        {
            cachedTeacherInfo = TeacherService.GetAllActiveTeachers();

            var cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromSeconds(60));

            MemoryCache.Set(cacheItemKey, cachedTeacherInfo, cacheEntryOptions);
        }

        return cachedTeacherInfo;
    }
    // 网页缓存学院信息列表【5min刷新】
    private List<MSchool> LoadSchoolInfoFromCacheAsync()
    {
        const string schoolCacheKey = "CachedSchoolInfo";

        if (!MemoryCache.TryGetValue(schoolCacheKey, out List<MSchool> cachedSchools) || cachedSchools.Count == 0)
        {
            cachedSchools = SchoolService.GetAllSchools();

            var cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(5));

            MemoryCache.Set(schoolCacheKey, cachedSchools, cacheEntryOptions);
        }
        return cachedSchools;
    }
    // 网页缓存专业信息列表【10min刷新】
    private List<MMajor> LoadMajorInfoFromCacheAsync()
    {
        const string cacheItemKey = "CachedMajorInfo";

        if (!MemoryCache.TryGetValue(cacheItemKey, out List<MMajor> cachedMajorInfo) || cachedMajorInfo.Count == 0)
        {
            cachedMajorInfo = MajorService.GetAllActiveMajors();

            var cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10));

            MemoryCache.Set(cacheItemKey, cachedMajorInfo, cacheEntryOptions);
        }
        return cachedMajorInfo;
    }
    // 网页缓存课程信息列表【30s刷新一次】
    private List<MCourse> LoadCourseInfoFromCacheAsync()
    {
        const string cacheItemKey = "CachedCourseInfo";

        if (!MemoryCache.TryGetValue(cacheItemKey, out List<MCourse> cachedCourseInfo) || cachedCourseInfo.Count == 0)
        {
            cachedCourseInfo = CourseService.GetAllActiveCourses();

            var cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromSeconds(30));

            MemoryCache.Set(cacheItemKey, cachedCourseInfo, cacheEntryOptions);
        }
        return cachedCourseInfo;
    }
    // 更新缓存、数据库中课程信息列表
    private void UpdateCourseInfoInCache()
    {
        _allCourses = CourseService.GetAllActiveCourses();

        // 更新缓存
        var cacheEntryOptions = new MemoryCacheEntryOptions()
            .SetSlidingExpiration(TimeSpan.FromSeconds(30));

        MemoryCache.Set("CachedCourseInfo", _allCourses, cacheEntryOptions);
        showCourses.Clear();
        foreach (var tec in _allCourses)
        {
            showCourses.Add(tec);
        }
        StateHasChanged();
        return;
    }

    protected override void OnInitialized()
    {
        // 使用缓存中的数据
        _allSchools = LoadSchoolInfoFromCacheAsync();
        _allMajors = LoadMajorInfoFromCacheAsync();
        _allCourses = LoadCourseInfoFromCacheAsync();
        foreach (var course in _allCourses)
        {
            showCourses.Add(course);
        }
    }

    // 信息表格
    private List<DataTableHeader<MMajor>> _headers => new List<DataTableHeader<MMajor>>
    {
    new()
        {
            Text = "序号",
            Align = DataTableHeaderAlign.Start,
            Sortable = true,
            // Value =_headers.FindIndex(header => header.Value == nameof(mCourse.TeacherId)),
            Value = nameof(MMajor.MajorID),
            Ellipsis = new DataTableEllipsis(),
            Width = 100
        },
        new() { Text = "课程名", Value = nameof(MMajor.MajorName),Width=175 },
        new() { Text = "所属学院", Value = nameof(MMajor.SchoolID),Width=100 },
        new() { Text = "备注", Value = nameof(MMajor.Description),Ellipsis = new DataTableEllipsis(),Sortable=false,Class="text-no-wrap" },
        new() { Text = "操作", Value = "Actions", Sortable = false, Width = 250 }
    };


    /*--------------------搜索框------------------------*/
    class SearchModel
    {
        public string? SearchInfo { get; set; }

        public int SchoolLimit { get; set; }

        public int MajorLimit{ get; set; }

    }
    SearchModel searchModel = new SearchModel();

    // 搜索框内内容发生更改时响应事件
    private void onSearch()
    {
        showCourses.Clear();
        if (!string.IsNullOrEmpty(searchModel.SearchInfo) || searchModel.SchoolLimit != 0)
        {

            foreach (var course in _allCourses)
            {
                // 检查教师信息是否包含搜索关键字或符合学院限制
                if ((string.IsNullOrEmpty(searchModel.SearchInfo) || course.CourseName.Contains(searchModel.SearchInfo, StringComparison.OrdinalIgnoreCase) || ((!string.IsNullOrEmpty(course.Description)) && course.Description.Contains(searchModel.SearchInfo, StringComparison.OrdinalIgnoreCase)))
                    && (searchModel.SchoolLimit == 0 || course.MajorID == searchModel.MajorLimit)
                && (searchModel.MajorLimit == 0 || course.SchoolID == searchModel.SchoolLimit))
                {
                    showCourses.Add(course);
                }
            }
        }
        else showCourses.AddRange(_allCourses);
    }


    /*-----------表单输入限制-----------*/

    // 姓名
    private IEnumerable<Func<string, StringBoolean>> _nameRules = new List<Func<string, StringBoolean>>
        {
            value => (!string.IsNullOrEmpty(value)) ? true: "请输入姓名"

        };

    // 性别选单性别列表
    private List<string> _genders = new List<string>
    {
        "男",
        "女"
    };

    // 联系邮箱
    static string _mailPattern = @"^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$";
    static Regex _mailRegex = new Regex(_mailPattern);
    private IEnumerable<Func<string, StringBoolean>> _mailRules = new List<Func<string, StringBoolean>>
        {
            value => (!string.IsNullOrEmpty(value)&& _mailRegex.IsMatch(value)) ? true: "请输入正确的联系邮箱"

        };

    //联系电话
    static string _phonePattern = @"^1[3-9]\d{9}$";
    static Regex _phoneRegex = new Regex(_phonePattern);
    private IEnumerable<Func<string, StringBoolean>> _phoneRules = new List<Func<string, StringBoolean>>
        {
            value => (!string.IsNullOrEmpty(value) && _phoneRegex.IsMatch(value)) ? true: "请输入正确的手机号"

        };

    // 身份证
    static string _idPattern = @"^[1-9]\d{5}(18|19|20)\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$";
    static Regex _idRegex = new Regex(_idPattern);
    private IEnumerable<Func<string, StringBoolean>> _idRules = new List<Func<string, StringBoolean>>
        {
            value => (!string.IsNullOrEmpty(value) && _idRegex.IsMatch(value)) ? true: "请输入正确的身份证号"

        };

    // 职称
    private List<MData> _jobTitleItems = DictService.GetJobTitles();
    // public EventCallback<int> JobTitleFilter(MData _jobTitleItem, string queryText)
    // {
    //     var textOne = _jobTitleItem.Name.Trim().ToLowerInvariant();
    //     var searchText = queryText.Trim().ToLowerInvariant();

    //     return textOne.IndexOf(searchText);
    // }
    // 编制
    private List<string> _budget = new List<string>
    {
        "是",
        "否"
    };
}
 *@